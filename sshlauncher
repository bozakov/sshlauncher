#!/usr/bin/env python
#
#    Copyright 2008 Zdravko Bozakov and Michael Bredel
#
#    This file is part of SSHLauncher.
#
#    SSHLauncher is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    SSHLauncher is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
#
import ConfigParser
import sshctrl
import time
import string
import sys
import re
import os

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-d", "--debug",
                  action="store_true",
                  dest="debug",
                  default=False,                  
                  help="enable debug mode")
parser.add_option("-e", "--escape",
                  action="store_true",
                  dest="escape",
                  default=False,                  
                  help="enable interpretation of backslash escapes in comands")

(opt, args) = parser.parse_args()

try:
    configfile = args[0]
except (IndexError, IOError):
    print "you must specify a configuration file!\n"
    raise SystemExit

if opt.debug:
    sshctrl.SshControl.DEBUG = opt.debug
    print "*** DEBUG mode ***"
if opt.escape:
    sshctrl.SshControl.ESCAPE = opt.escape
    print "*** ESCAPE mode ***"


# set empty default password
defaultPassword=''

# import bash envionment variables which start with SL_
defaults={}
for param in os.environ.keys():
    if param[:3]=='SL_':
        defaults[param]=os.environ[param]
   
if sshctrl.SshControl.DEBUG and defaults:
    print "Using environment variables: "
    for d in defaults:
        print "\t %s = %s" % (d,defaults[d],)

# parse configuration file
config = ConfigParser.ConfigParser(defaults)
if not config.read(configfile):
    print "no configuration file named %s!\n" % configfile
    raise SystemExit

# create empty thread list
threadList=[]

# parse config file sections
for section in config.sections():    
    try:
        pwd = config.get(section, 'password')
    except ConfigParser.NoOptionError:
        pwd = defaultPassword
    
    try:
        after = config.get(section, 'after')
        after = eval( after )
    except ConfigParser.NoOptionError:
        after = None
    
    try:
        sync = config.get(section, 'sync')
        sync = eval( sync )
    except ConfigParser.NoOptionError:
        sync = None
    
    try:
        threadList.append(
            sshctrl.SshControl( 
                section, 
                config.get(section, 'host'), 
                config.get(section, 'user'), 
                pwd,
                config.get(section, 'command'), 
                after,
                sync,
            )
        )
    except ConfigParser.InterpolationMissingOptionError, e:
        print "\nERROR:\tvariable not defined\n"
        print e
        raise SystemExit

sshctrl.SshControl.sshThreads = threadList;
print "-"*80
print "\n"

# start all threads in thread list
for sshThread in threadList:
    	sshThread.start()

while threadList:
    try:
        time.sleep(1)
    except KeyboardInterrupt: 
        for sshThread in threadList:
            sshThread.sshDisconnect()
        print "\n\n Terminated!\n"
        raise SystemExit


if __name__ == "__main__": 
    print sys.version

